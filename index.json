[{"content":"How to convert a dict with camel case keys into a dict with snake case keys?\nCheck out below\nfrom django.utils.functional import cached_property from rest_framework import serializers class KeyMappingSerializerMixin: Meta: type @cached_property def fields(self): # noinspection PyUnresolvedReferences fields = super().fields key_map = getattr(self.Meta, \u0026#39;key_map\u0026#39;, {}) for target, source in key_map.items(): if target != source: fields[target].bind(field_name=source, parent=self) return fields class ExternalServiceCallbackSerializer(KeyMappingSerializerMixin, serializers.ModelSerializer): class Meta: model = ExternalServiceCallback fields = (\u0026#39;timestamp\u0026#39;, \u0026#39;service_name\u0026#39;, \u0026#39;user_data\u0026#39;) key_map = { \u0026#39;timestamp\u0026#39;: \u0026#39;createdAt\u0026#39;, \u0026#39;service_name\u0026#39;: \u0026#39;service\u0026#39;, \u0026#39;user_data\u0026#39;: \u0026#39;userData\u0026#39;, } ","permalink":"https://kazakov.ru.net/notes/camel_case_to_snake_case/","summary":"How to convert a dict with camel case keys into a dict with snake case keys?\nCheck out below\nfrom django.utils.functional import cached_property from rest_framework import serializers class KeyMappingSerializerMixin: Meta: type @cached_property def fields(self): # noinspection PyUnresolvedReferences fields = super().fields key_map = getattr(self.Meta, \u0026#39;key_map\u0026#39;, {}) for target, source in key_map.items(): if target != source: fields[target].bind(field_name=source, parent=self) return fields class ExternalServiceCallbackSerializer(KeyMappingSerializerMixin, serializers.ModelSerializer): class Meta: model = ExternalServiceCallback fields = (\u0026#39;timestamp\u0026#39;, \u0026#39;service_name\u0026#39;, \u0026#39;user_data\u0026#39;) key_map = { \u0026#39;timestamp\u0026#39;: \u0026#39;createdAt\u0026#39;, \u0026#39;service_name\u0026#39;: \u0026#39;service\u0026#39;, \u0026#39;user_data\u0026#39;: \u0026#39;userData\u0026#39;, } ","title":"Camel case to snake case serializer in Django REST framework"},{"content":"Salute! üëã My name is Denis, and I am a backend developer. I write in Python üêç and love doing optimization: diving deep into a problem and looking for solutions to it.\nI am very interested in high-load distributed systems. I believe that a long-living project requires good test coverage and possibly ugly but strict code style. And MVP is MVP.\nI have no computer science education, but before entering IT, I had some entrepreneurial and leadership experience, so I am well aware of how to prioritize business requirements and perfectionism.\nExperience  June 2021 - present Backend engineer\nITASystems (1cupis project), Moscow  I work on an antifraud for the payment system. I mostly do optimization - looking for bottlenecks and speeding up the service.\nTraces, metrics, partitioning, indexes, and the like are all related to what I do.\n Python Django Flask PostgreSQL MongoDB Kafka RabbitMQ Docker Kubernetes Jaeger Kibana\n December 2020 - June 2021 Fullstack engineer\nPrintum, Moscow  I developed backend and frontend for SaaS, an embedded product, and a small mobile application.\nOf the non-trivial things I had to do:\n an integration with ActiveDirectory (users sync) an embedded application for Xerox MFPs  Since the team was small, I took on some more unusual functions, such as:\n working with customers: deploying boxed software in their infrastructure, preparing for a presentation, consulting administrators working with outsourcing teams product delivery automation: packaging, uploading to S3, installation from S3 to the customer\u0026rsquo;s local network publishing of a mobile application to Google Play and AppStore.   Python Django DRF PostgreSQL Docker Vue.js jQuery LDAP SNMP Ansible Bash\n December 2019 - November 2020 Test automation engineer\nTensor, Novosibirsk  I was engaged in the automation of UI and API testing of the warehouse accounting system.\nIn addition to the tests themselves, I developed elements of the company\u0026rsquo;s testing framework, and also set up CI in Jenkins: built pipelines for various types of tests (smoke, acceptance, integration), wrote Groovy scripts to update the test environment.\n Python Selenium Jenkins Groovy Page object\n  Before IT  June 2018 - December 2019 Entrepreneur\nE-commerce, Novosibirsk  I looked for and established contacts with suppliers, was advertising, SEO, working with clients, sales, logistics, accounting, and others.\nMy passion for optimization with Python led me eventually to IT.\n Python Liquid InSales Yandex Direct\n July 2012 - June 2018 Company commander, senior engineer\nThe Armed Forces of the Russian Federation, Novosibirsk  Commanded a company and organized machines operation in conditions of persistent multiprocessing. üòä\n Management Planning Multitasking\n  Education  2007 - 2012 Higher, specialist degree\nThe Land Forces academy of the Armed Forces of the Russian Federation, Omsk\nEngineer, automobiles and their maintenance 2010 - 2012 Additional to higher\nThe Land Forces academy of the Armed Forces of the Russian Federation, Omsk\nTranslator in the sphere of professional communication (English)  ","permalink":"https://kazakov.ru.net/about/","summary":"Salute! üëã My name is Denis, and I am a backend developer. I write in Python üêç and love doing optimization: diving deep into a problem and looking for solutions to it.\nI am very interested in high-load distributed systems. I believe that a long-living project requires good test coverage and possibly ugly but strict code style. And MVP is MVP.\nI have no computer science education, but before entering IT, I had some entrepreneurial and leadership experience, so I am well aware of how to prioritize business requirements and perfectionism.","title":"Denis Kazakov"}]