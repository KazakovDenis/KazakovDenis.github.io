[{"content":"Salute! üëã My name is Denis, I lead one of Python üêç teams at 1cupis. I love doing optimizations: diving deep into a problem and looking for solutions.\nI am very interested in high-load distributed systems. I believe that a long-living project requires good test coverage and possibly ugly but strict code style. And MVP is MVP.\nLove open source and well-expertised in Django, but I\u0026rsquo;d gladly change it for something else.\nI am self-taught and have no computer science education, but before entering IT, I had some entrepreneurial and leadership experience, so I am well aware of how to prioritize business and technical requirements.\nExperience February 2023 - present Backend team lead\nITASystems (1cupis project), Moscow I lead a team of 8 people: devs, QA \u0026amp; system analyst.\nI do:\nassesment of employees performance \u0026amp; providing feedbacks inter-team interaction taking part in development of architectural solutions, negotiation of API contracts taking part in a recruitment process improvement of software development \u0026amp; CI/CD processes code review coding (when it\u0026rsquo;s possible üòÄ) Overall, my role is to ensure that my team is working efficiently to achieve our goals.\nManagement Python Django Flask PostgreSQL MongoDB Kafka RabbitMQ Docker Kubernetes Jaeger Kibana\nJune 2021 - January 2023 Backend engineer\nITASystems (1cupis project), Moscow I developed an antifraud for a payment system. In general, I did optimizations - looked for bottlenecks and increased service performance.\nTracing, metrics, partitioning, indexes, and so on - that\u0026rsquo;s what I did.\nPython Django Flask PostgreSQL MongoDB Kafka RabbitMQ Docker Kubernetes Jaeger Kibana\nDecember 2020 - June 2021 Fullstack engineer\nPrintum, Moscow I developed backend and frontend for SaaS, an embedded product, and a small mobile application.\nOf the non-trivial things I had to do:\nan integration with ActiveDirectory (users sync) an embedded application for Xerox MFPs Since the team was small, I took on some more unusual functions, such as:\nworking with customers: deploying embedded software in their infrastructure, preparing for a presentation, consulting administrators working with outsourcing teams product delivery automation: packaging, uploading to S3, installation from S3 to the customer\u0026rsquo;s local network publishing of a mobile application to Google Play and AppStore. Python Django DRF PostgreSQL Docker Vue.js jQuery LDAP SNMP Ansible Bash\nDecember 2019 - November 2020 Test automation engineer\nTensor, Novosibirsk I was engaged in the automation of UI and API testing of the warehouse accounting system.\nIn addition to the tests themselves, I developed elements of the company\u0026rsquo;s testing framework, and also set up CI in Jenkins: built pipelines for various types of tests (smoke, acceptance, integration), wrote Groovy scripts to update the test environment.\nPython Selenium Jenkins Groovy Page object\nBefore IT June 2018 - December 2019 Entrepreneur\nE-commerce, Novosibirsk I looked for and established contacts with suppliers, was advertising, SEO, working with clients, sales, logistics, accounting, and others.\nMy passion for optimization with Python led me eventually to IT.\nPython Liquid InSales Yandex Direct\nJuly 2012 - June 2018 Company commander, senior engineer\nThe Armed Forces of the Russian Federation, Novosibirsk Commanded a company and organized machines operation in conditions of persistent multiprocessing. üòä\nManagement Planning Multitasking\nEducation 2007 - 2012 Higher, specialist degree\nThe Land Forces academy of the Armed Forces of the Russian Federation, Omsk\nEngineer, automobiles and their maintenance 2010 - 2012 Additional to higher\nThe Land Forces academy of the Armed Forces of the Russian Federation, Omsk\nTranslator in the sphere of professional communication (English) ","permalink":"https://kazakov.ru.net/about/","summary":"Salute! üëã My name is Denis, I lead one of Python üêç teams at 1cupis. I love doing optimizations: diving deep into a problem and looking for solutions.\nI am very interested in high-load distributed systems. I believe that a long-living project requires good test coverage and possibly ugly but strict code style. And MVP is MVP.\nLove open source and well-expertised in Django, but I\u0026rsquo;d gladly change it for something else.","title":"Denis Kazakov"},{"content":"üí° Contributions to open source I want to be useful for the community and suggest improvements for tools I use myself üòä.\nKafka-python One project had the need to get rid of Kafka\u0026rsquo;s consumer rebalances in order to provide constant reading from topics. However, none of the popular client libraries (kafka-python, confluent-kafka, pykafka) offered this functionality, despite the fact that it was already implemented in the 2.3.0 version of the broker. I first implemented this feature by overriding KafkaConsumer in the project repository and then opened the Pull request. Unfortunately, the project is almost abandoned now.\nDjango extensions When I worked on a few new features, I often came across a situation where I had to switch between branches, roll back migrations of one branch, and apply migrations of another. As long as you work in the same Django app, no problems arise. But when migrations involve multiple Django applications, rolling back of each application becomes a frustrating chore.\nI wrote a Django command that captures a state of migrations on the current branch to a file and makes it easy to switch between branches.\nJaeger client Jaeger is a great code tracing tool. But one day I needed more flexible customization, which the configuration of the client library did not allow. I suggested applying dependency injection to the config class.\nüìÇ My projects Relatives The service for building family trees.\nI have long wanted to build a family tree, but I could not find suitable free tools for this, and those that were found did not meet my requirements. So I decided to reinvent the wheel. And at the same time to use some modern technologies for this, to get acquainted them better. That\u0026rsquo;s why I chose FastAPI with asynchronous ORM, although they are absolutely irrelevant, and Django could fit much better.\nFastAPI Ormar Asyncio\nAiofutures This library is to replace ThreadPoolExecutor with asynchronous one and published in PyPI.\nIn one of my projects, I faced limitations of the well-known GIL due to extensive HTTP interactions in the application. Timeouts for HTTP requests were not working correctly due to a large number of OS threads and context switching. I took a decision to move all HTTP interactions to a separate thread that would execute requests asynchronously. The number of threads in the application was reduced from 24-25 to 10, timeouts started working correctly, and resource consumption was significantly reduced. This also laid the foundation for rewriting the application in an asynchronous style.\nPython asyncio\nDynamic-sitemap This sitemap generation library is published in PyPI, and the documentation is hosted at readthedocs.\nInitially, I only needed to add a sitemap to my Flask blog project. However, after I did not find a more or less attractive alternative, I decided to write my library, and at the same time learn how to publish it to the python package index. Then I decided to use it also to study various tools, for example, Sphinx.\nPython Sphinx\n","permalink":"https://kazakov.ru.net/projects/","summary":"üí° Contributions to open source I want to be useful for the community and suggest improvements for tools I use myself üòä.\nKafka-python One project had the need to get rid of Kafka\u0026rsquo;s consumer rebalances in order to provide constant reading from topics. However, none of the popular client libraries (kafka-python, confluent-kafka, pykafka) offered this functionality, despite the fact that it was already implemented in the 2.3.0 version of the broker.","title":"Projects"}]